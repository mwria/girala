import telebot
import mysql.connector
import random
from telebot import types
import time

bot = telebot.TeleBot("6127981599:AAHBe-NzKCLiE7xAn8iI8Kw2DQHG_SDlu1M")
def db_config():
    return {
        'host': 'localhost',
        'database': 'girala',
        'user': 'maria',
        'password': '13243122'
    }
def main():
    @bot.callback_query_handler(func=lambda call: call.data.startswith('subcategoria_'))
    def subcategoria_callback(call):
        subcategoria = call.data.replace('subcategoria_', '')
        gerar_carta_sorteada(subcategoria, call.message.chat.id)


    @bot.message_handler(func=lambda message: True)
    def handle_message(message):
        if message.text.startswith('botão'):
            num_botao = message.text.replace('botão', '').strip()
            gerar_carta_sorteada(num_botao, message.chat.id)

    def gerar_carta_sorteada(num_botao, user_id):
        try:
            con = mysql.connector.connect(**db_config())
            cursor = con.cursor()

            cursor.execute('SELECT subcategoria FROM personagens WHERE id = %s', (num_botao,))
            result = cursor.fetchone()

            if result:
                subcategoria = result[0]
                cursor.execute('SELECT id, subcategoria, imagem FROM personagens WHERE subcategoria = %s', (subcategoria,))
                result = cursor.fetchall()

                if result:
                    id, subcategoria, imagem = random.choice(result)

                    response = f"ID: {id}\nSubcategoria: {subcategoria}"
                    if imagem:
                        with open(imagem, 'rb') as photo:
                            bot.send_photo(user_id, photo, caption=response)
                    else:
                        bot.send_message(user_id, response)
                else:
                    bot.send_message(user_id, "Nenhum resultado encontrado para a subcategoria fornecida.")

            else:
                bot.send_message(user_id, f"O botão {num_botao} não existe.")

        except mysql.connector.Error as err:
            bot.send_message(user_id, f"Erro ao buscar personagem: {err}")

        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'con' in locals():
                con.close()


def execute_query(query):
        conn = mysql.connector.connect(**db_config())
        cursor = conn.cursor()
        cursor.execute(query)
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        return result

def buscar_categorias():
        try:
            conn = mysql.connector.connect(**db_config())
            cursor = conn.cursor()

            cursor.execute('SELECT DISTINCT categoria FROM personagens')

            categorias = [row[0] for row in cursor.fetchall()]

            return categorias

        except mysql.connector.Error as err:
            print(f"Erro ao buscar categorias: {err}")
            return []

        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

def buscar_subcategorias(categoria, user_id=None):
        try:
            conn = mysql.connector.connect(**db_config())
            cursor = conn.cursor()

            if user_id is None:
                cursor.execute('SELECT DISTINCT subcategoria FROM personagens WHERE categoria = %s', (categoria,))
            else:
                cursor.execute('SELECT DISTINCT subcategoria FROM personagens WHERE categoria = %s AND user_id != %s',
                               (categoria, user_id))

            subcategorias = [row[0] for row in cursor.fetchall()]

            return subcategorias

        except mysql.connector.Error as err:
            print(f"Erro ao buscar subcategorias: {err}")
            return []

        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()

def buscar_carta_aleatoria(subcategoria, config=None):

    # Conectando ao banco de dados
    conn = mysql.connector.connect(**config)
    cursor = conn.cursor()

    try:
        # Executando a consulta SQL para buscar uma carta aleatória com a mesma subcategoria
        query = "SELECT id, nome FROM personagens WHERE subcategoria = %s ORDER BY RAND() LIMIT 1"
        cursor.execute(query, (subcategoria,))

        # Obtendo o resultado da consulta
        result = cursor.fetchone()

        if result:
            id_carta = result[0]
            nome_carta = result[1]
            print(f"ID da carta: {id_carta}")
            print(f"Nome da carta: {nome_carta}")
        else:
            print("Nenhuma carta encontrada com a subcategoria especificada.")

    except mysql.connector.Error as error:
        print(f"Erro ao buscar a carta no banco de dados: {error}")

    finally:
        # Fechando a conexão com o banco de dados
        if conn.is_connected():
            cursor.close()
            conn.close()

categorias = buscar_categorias()

@bot.message_handler(commands=['start'])
def start(message):

        keyboard = telebot.types.InlineKeyboardMarkup()
        image_path = "imagens/Normal/halseynormal.jpeg"  # Defina o caminho correto para a imagem
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption='Seja muito bem vindo ao giralá! entre e fique a vontade', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('categoria_'))
def categoria_callback(call):
        categoria = call.data.replace('categoria_', '')

        subcategorias = buscar_subcategorias(categoria)
        subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

        if subcategorias:
            keyboard = telebot.types.InlineKeyboardMarkup()

            for subcategoria in subcategorias:
                button = telebot.types.InlineKeyboardButton(subcategoria, callback_data='subcategoria_' + subcategoria)
                keyboard.add(button)

            try:
                bot.edit_message_text('Selecione uma subcategoria:', call.message.chat.id, call.message.message_id,
                                      reply_markup=keyboard)
            except telebot.apihelper.ApiTelegramException:
                pass
        else:
            bot.send_message(call.message.chat.id, "Nenhuma subcategoria encontrada para a categoria selecionada.")


def gerar_carta_sorteada(subcategoria):
    pass


@bot.callback_query_handler(func=lambda call: call.data.startswith('subcategoria_'))
def subcategoria_callback(call):
        subcategoria = call.data.replace('subcategoria_', '')

        # Lógica para gerar e enviar a carta sorteada
        gerar_carta_sorteada(subcategoria)

@bot.message_handler(commands=['ggirar'])
def ggirar(message):
        keyboard = telebot.types.InlineKeyboardMarkup()

        # Primeira coluna
        primeira_coluna = []
        primeira_coluna.append(telebot.types.InlineKeyboardButton(text="Música", callback_data='gmusica'))
        primeira_coluna.append(telebot.types.InlineKeyboardButton(text="Filmes", callback_data='gfilme'))
        primeira_coluna.append(telebot.types.InlineKeyboardButton(text="Jogos", callback_data='gjogo'))
        keyboard.add(*primeira_coluna)

        # Segunda coluna
        segunda_coluna = []
        segunda_coluna.append(telebot.types.InlineKeyboardButton(text="Animanga", callback_data='ganime'))
        segunda_coluna.append(telebot.types.InlineKeyboardButton(text="Séries", callback_data='gseries'))
        segunda_coluna.append(telebot.types.InlineKeyboardButton(text="Miscelânea", callback_data='gmisc'))
        keyboard.add(*segunda_coluna)

        # Botão "Geral"
        keyboard.row(telebot.types.InlineKeyboardButton(text="Geral", callback_data='ggeral'))

        # Imagem
        image_path = "imagens/Normal/halseynormal.jpeg"  # Defina o caminho correto para a imagem
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption='Selecione uma categoria:', reply_markup=keyboard)


def ggeral(message):
    pass


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
        if call.message:
            if call.data == 'gmusica':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                gmusica(call.message)

            elif call.data == 'gfilme':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                gfilme(call.message)

            elif call.data == 'gjogo':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                gjogo(call.message)

            elif call.data == 'ganime':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                ganime(call.message)

            elif call.data == 'gserie':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                gserie(call.message)

            elif call.data == 'gmisc':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                gmisc(call.message)

            elif call.data == 'ggeral':
                bot.send_chat_action(call.message.chat.id, 'typing')
                time.sleep(1)
                ggeral(call.message)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
        if call.message:
            categoria = call.data
            bot.send_message(call.message.chat.id, f"Você selecionou a categoria: {categoria}")

@bot.message_handler(commands=['gmusica'])
def gmusica(message):
        try:
            conn = mysql.connector.connect(**db_config())
            cursor = conn.cursor()

            subcategorias = buscar_subcategorias("musica")
            subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

            if subcategorias:
                resposta = "E o universo sorteou:\n"
                subcategorias_aleatorias = random.sample(subcategorias, min(4, len(subcategorias)))
                for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
                    resposta += f"{i} {subcategoria}\n"

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("1", "2", "3", "4")

                bot.send_message(message.chat.id, resposta, reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "Nenhuma subcategoria encontrada para a categoria 'Música'.")

        except mysql.connector.Error as err:
            bot.send_message(message.chat.id, f"Erro ao buscar subcategorias: {err}")

        finally:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()


def buscar_carta_aleatoria_por_subcategoria(subcategoria):
    pass


def buscar_subcategoria_por_numero(numero_botao):
    pass


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    numero_botao = int(call.data)
    subcategoria = buscar_subcategoria_por_numero(numero_botao)
    carta_aleatoria = buscar_carta_aleatoria_por_subcategoria(subcategoria)

    # Processamento adicional com a carta aleatória

    mensagem = f"ID: {carta_aleatoria['id']}\n"
    mensagem += f"Nome: {carta_aleatoria['nome']}\n"
    mensagem += f"Imagem: {carta_aleatoria['imagem']}"

    bot.send_message(call.message.chat.id, mensagem, reply_to_message_id=call.message.message_id)


@bot.message_handler(commands=['gfilme'])
def gfilme(message):
    subcategorias = buscar_subcategorias("filmes")
    subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

    if subcategorias:
        resposta = "E o universo sorteou:\n \n"
        subcategorias_aleatorias = random.sample(subcategorias, min(4, len(subcategorias)))
        for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
            resposta += f"{i} {subcategoria}\n"
        markup = types.InlineKeyboardMarkup()
        for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
            button = types.InlineKeyboardButton(text=str(i), callback_data=str(i))
            markup.add(button)
        subresposta = "\nQual desses você vai escolher?\n"
        bot.send_message(message.chat.id, resposta + subresposta, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "Nenhuma subcategoria encontrada para a categoria 'Filmes'.")


@bot.message_handler(commands=['gseries'])
def gserie(message):
        subcategorias = buscar_subcategorias("series")
        subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

        if subcategorias:
            resposta = "E o universo sorteou:\n"
            subcategorias_aleatorias = random.sample(subcategorias, min(4, len(subcategorias)))
            for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
                resposta += f"{i} {subcategoria}\n"

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("1", "2", "3", "4")

            bot.send_message(message.chat.id, resposta, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "Nenhuma subcategoria encontrada para a categoria 'Séries'.")

@bot.message_handler(commands=['gjogo'])
def gjogo(message):
        subcategorias = buscar_subcategorias("jogos")
        subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

        if subcategorias:
            resposta = "E o universo sorteou:\n"
            subcategorias_aleatorias = random.sample(subcategorias, min(4, len(subcategorias)))
            for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
                resposta += f"{i} {subcategoria}\n"

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("1", "2", "3", "4")

            bot.send_message(message.chat.id, resposta, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "Nenhuma subcategoria encontrada para a categoria 'Jogos'.")

@bot.message_handler(commands=['ganime'])
def ganime(message):
        subcategorias = buscar_subcategorias("animanga")
        subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

        if subcategorias:
            resposta = "E o universo sorteou:\n"
            subcategorias_aleatorias = random.sample(subcategorias, min(4, len(subcategorias)))
            for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
                resposta += f"{i} {subcategoria}\n"

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("1", "2", "3", "4")

            bot.send_message(message.chat.id, resposta, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "Nenhuma subcategoria encontrada para a categoria 'Animanga'.")

@bot.message_handler(commands=['gmisc'])
def gmisc(message, cursor=None, conn=None):
        subcategorias = buscar_subcategorias("miscelanea")
        subcategorias = [subcategoria for subcategoria in subcategorias if subcategoria]

        if subcategorias:
            resposta = "E o universo sorteou:\n"
            subcategorias_aleatorias = random.sample(subcategorias, min(4, len(subcategorias)))
            for i, subcategoria in enumerate(subcategorias_aleatorias, start=1):
                resposta += f"{i} {subcategoria}\n"

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("1", "2", "3", "4")

            bot.send_message(message.chat.id, resposta, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "Nenhuma subcategoria encontrada para a categoria 'Miscelânea'.")

        cursor.close()
        conn.close()

bot.polling()

if __name__ == "__main__":
    main()
